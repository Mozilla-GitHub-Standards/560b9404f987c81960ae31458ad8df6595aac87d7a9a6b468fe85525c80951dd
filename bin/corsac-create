#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var v = require('valentine');
var ghdownload = require('github-download'); // <-- easy cloning
var S = require('string');
var colors = require('colors');
var corsac = require('../');
var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;


var templateRepoURL = false;
var program = corsac.program();

program
	.command('create <template> <path>')
	.description('create a new Firefox OS app')
	.action(function(inTemplate, inPath) {
        if (!inTemplate) {
            inTemplate = "corsac-template-basic";
        }

        if (!inPath) {
            inPath = process.cwd();
        }


		if (!S(inTemplate).contains("corsac-template")) {
			// template repos are always names corsac-template-<name>
            inTemplate = "corsac-template-" + inTemplate;
		}

		corsac.info("Searching " + "Mozilla".green + " Brasil ".yellow + "GitHub for template: " + inTemplate + "...");

        var url = "https://api.github.com/orgs/mozillabrasil/repos";
        var xhr = new XMLHttpRequest();

        xhr.open("GET", url, true);

        xhr.onreadystatechange = function() {

            if (xhr.readyState==4 && xhr.status==200) {

                var data = JSON.parse(xhr.responseText);

                v(data).each(function(repo) {
                    // loop repos searching for the same name
                    // to fetch url.
                    if (repo.name === inTemplate) {
                        corsac.info("Selected template: " + repo.clone_url);
                        templateRepoURL = repo.clone_url;
                    }
                });

                if (!templateRepoURL) {
                    corsac.fail("Can't find template: " + inTemplate);
                }

                ghdownload(templateRepoURL, inPath)
                .on('error', function(err) {
                    if (err.code === "ENOTEMPTY") {
                        corsac.fail("Destination path is not empty");
                    } else {
                        corsac.fail(err);
                    }
                })
                .on('end', function() {
                    corsac.ok("App created at " + inPath);
                    process.exit();
                });
            }

		};

        xhr.send();
	});